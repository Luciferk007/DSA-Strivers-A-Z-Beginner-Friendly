/*Simply just sort the array and once all the zeroes comes to front you can just check the number of zeroes and rotate the array that many times to send all zeroes at the end and if you maintain the same order just simply store the nonzero elments at the front and then fill all the remaining values till n with zeroes*/

#include <iostream>
#include <bits/stdc++.h>
using namespace std;

void sort_zeros_without_order_change(int arr[], int n)
{
  int count =0;
  for(int i=0; i<n; i++)
  {
    if(arr[i]!=0)
    {
      arr[count++] = arr[i]; //shifting nonzero elment to front
    }
  }
  while(count<n)
  {
    arr[count++] = 0;
  }
}
void swap(int *a, int *b)
{
  int temp = *a;
  *a = *b;
  *b = temp;
}

int count_zeroes(int arr[], int n)
{
  int i=0;
  int cnt =0;
  while(arr[i] == 0)
  {
    cnt++;
    i++;
  }
  return cnt;
}

void sort_zeros(int arr[], int n)
{
  sort(arr,arr+n);    //sort function expects iterators not integers, i can't use arr[0] or arr[n]
  int index = count_zeroes(arr,n);
  for(int i=0; i<index; i++)
  {
    for(int j=1; j<n; j++)
    {
      swap(&arr[j-1],&arr[j]);
    }
  }
}

void print_array(int arr[],int n)
{
  for(int i=0; i<n; i++)
  {
    cout<<arr[i]<<" ";
  }
  cout<<endl;
}

int main()
{
  int arr[] = {1,0,2,0,3,0,4,8,7,1,0};
  int n = sizeof(arr)/sizeof(arr[0]);
  print_array(arr,n);
  
  sort_zeros_without_order_change(arr,n);
  print_array(arr,n);
  
  sort_zeros(arr,n);
  print_array(arr,n);
}