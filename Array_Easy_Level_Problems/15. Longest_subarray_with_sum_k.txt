#include<iostream>
#include<vector>
using namespace std;

void longest_sub_array_len(int arr[], int n, int k)
{
  int start =0; int end =0; int longest_elem = 0; int sum =0;
  for(int start=0; start<n; start++)
  {
    sum += arr[start];
    
    while(sum > k && end <= start)
    {
      sum -= arr[end];
      end++;
    }
    
    if(sum == k)
    {
      longest_elem = max(longest_elem, (start-end)+1); 
    }
  }
  cout<<"Longest Length Possible: "<<longest_elem<<endl;
}

void print_longest_sub_array(int arr[], int n, int k)
{
  int best_start; int best_end; int start =0; int end =0; int sum=0;
  vector<int>v;
  for(int start=0; start<n; start++)
  {
    sum += arr[start];
    
    while(sum > k && end <= start)
    {
      sum -= arr[end];
      end++;
    }
    if(sum == k)
    {
      best_start = end;
      best_end = start;
      for(int i=best_start; i<=best_end; i++)
      {
        v.push_back(arr[i]);
      }
    }
  }
  cout<<"The subarray is: "<<endl;
  for(int i=0; i<v.size(); i++)
  {
    cout<<v[i]<<" ";
  }
}


int main()
{
  int arr[] = {2,3,4,1,1,2,1};
  int k = 14;
  int n = sizeof(arr)/sizeof(arr[0]);
  longest_sub_array_len(arr,n,k);
  print_longest_sub_array(arr,n,k);
}