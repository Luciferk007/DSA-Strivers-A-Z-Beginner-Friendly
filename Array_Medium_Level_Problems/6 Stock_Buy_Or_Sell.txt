#include<iostream>
#include<bits/stdc++.h>
using namespace std;

//Brute force approach
void max_stock_profit(int arr[], int n)
{
  int max_profit =INT_MIN;
  int min_stock, max_stock;
  for(int i=0; i<n; i++)
  {
    for(int j=i+1; j<n; j++)
    {
      if(arr[i] < arr[j])
      {
        min_stock = arr[i];
        max_stock = arr[j];
        max_profit = max(max_profit,(max_stock-min_stock));
      }
    }
  }
  if(max_profit > 0)
  {
    cout<<"Max_Profit: "<<max_profit<<endl;
  }
  else
  {
    cout<<"Max_Profit: "<<0<<endl;
  }
}
//Optimal approach

void max_profit_optimum(int arr[], int n)
{
  int min_stock = INT_MAX;
  int max_profit = 0;
  for(int i=0; i<n; i++)
  {
    min_stock = min(min_stock, arr[i]);
    max_profit = max(max_profit, (arr[i] - min_stock));
  }
  cout<<"Max Profit Optimum: "<<max_profit<<endl;
}



int main()
{
  int arr[] = {7,1,5,3,6,4};
  int n = sizeof(arr)/sizeof(arr[0]);
  max_stock_profit(arr,n);
  max_profit_optimum(arr,n);
}